<?php
/**
 * @file
 * Code for the Print Count Stats feature.
 */

include_once 'print_count_stats.features.inc';

/**
 * Implements hook_menu().
 */
function print_count_stats_menu() {
  $items = array();
  $items['print_count_stats'] = array(
    'title' => 'Print Count Stats',
    'page callback' => '_print_count_stats_page',
    'access callback' => '_access_print_count_stats',
    'expanded' => TRUE
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function print_count_stats_permission() {
  return array(
    'administer print count stats' => array(
      'title' => t('Administer Print Count Stats')
    )
  );
}

/**
 * Access callback for permission to view print count stats.
 */
function _access_print_count_stats() {
  return user_access('administer print count stats');
}

function print_count_stats_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if( $type == 'library_printer' ) {
    if( user_access('administer print count stats') ) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Custom page callback function
 */
function _print_count_stats_page() {
  $nids = _get_enabled_printer_nids();
  $nodes = entity_load('node', $nids);

  if(count($nids) == 0) {
    return '<p>No printers defined.</p>';
  }

  $rows  = array();
  $months = array();

  $results = db_query("SELECT DISTINCT(CONCAT_WS('-',year,month)) as month_display FROM {print_count_stats_counter} WHERE nid IN (:nids) ORDER BY month_display", array(':nids' => $nids));
  $i = 0;
  foreach( $results->fetchCol(0) as $month ) {
  	$months[ $month ] = $i++;
  }

  foreach( $nodes as $node ) {
  	$lib_id = field_get_items('node', $node, 'field_library');
  	$lib = field_view_value( 'node', $node, 'field_library', $lib_id[0]);
  	$totals = array_fill_keys( array_values($months), 0);
  	$diffs  = array_fill_keys( array_values($months), 0);
  	$prev   = 0;
  	$results = db_query("SELECT *, CONCAT_WS('-',year,month) as month_display FROM {print_count_stats_counter} WHERE nid = :nid ORDER BY month_display", array(':nid' => $node->nid));
  	foreach( $results as $result ) {
  		$count = $result->counter;

  		$totals[$months[$result->month_display]] = $count;
  		$diffs[$months[$result->month_display]] = $count - $prev;
  		$prev = $count;
  	}
   	$rows[] = array( 'data' => array_merge( array( array( 'data' => l($node->title, drupal_get_path_alias('node/' . $node->nid)) . '<br/><i style="font-weight:normal;">' . $lib['#title'] . '</i>', 'rowspan' => 2, 'header' => 1), 'Total' ), $totals ));
  	$rows[] = array( 'data' => array_merge( array( 'Diff' ), $diffs ));
  }
  $output = theme('table', array( 'header' => array_merge( array(t('Printer'), '' ), array_keys($months)), 'rows' => $rows ));
  return $output;
}

function print_count_stats_cron() {
  $nids = _get_enabled_printer_nids();
  $nodes = entity_load('node', $nids);
  foreach( $nodes as $node ) {
    $ip_id = field_get_items('node', $node, 'field_ip_address');
    $ip = field_view_value( 'node', $node, 'field_ip_address', $ip_id[0]);
    $counter = snmp2_get($ip['#markup'],'public','1.3.6.1.2.1.43.10.2.1.4.1.1');
    if($counter) {
	    $counter = explode( ' ', $counter )[ 1 ];
	    db_query("INSERT INTO {print_count_stats_counter} (nid,month,year,counter) VALUES (:nid,:month,:year,:counter) ON DUPLICATE KEY UPDATE counter=:counter",
	    	array(':nid' => $node->nid, ':month' => date('m'), ':year' => date('Y'), ':counter'=> $counter));
	}
  }
}

function _get_enabled_printer_nids() {
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type','library_printer')
    ->fieldCondition('field_enabled', 'value', 1)
    ->propertyOrderBy('title', 'ASC')
    ->execute();

  $nids = array();
  if (isset($results['node'])) {
    $nids = array_keys($results['node']);
  }

  return $nids;
}

function node_content_delete($node) {
  if($node->type == 'library_printer') {
    db_query("DELETE FROM {print_count_stats_counter} WHERE nid = :nid", array(':nid'=>$node->nid));
  }
}